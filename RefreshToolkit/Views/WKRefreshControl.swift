//
//  WKRefreshControl.swift
//  WKRefreshDemo
//
//  Created by hooge on 16/4/27.
//  Copyright ¬© 2016Âπ¥ hooge. All rights reserved.
//
//  Ëøô‰∏™Á±ªÊòØ‰∏ÄÂàáÁªÑ‰ª∂ÁöÑÂü∫Á±ª ‰ΩÜÊòØswift‰∏çÂ•ΩÂÆûÁé∞ÁúüÊ≠£ÊÑè‰πâ‰∏äÁöÑÊäΩË±°Âü∫Á±ªÔºàÂçèËÆÆ‰∏éC++‰∏≠ÁöÑÊäΩË±°Âü∫Á±ªËøòÊòØÊúâÂæàÂ§ßÁöÑÂå∫Âà´Ôºâ
//  Ëøô‰∏™Á±ª‰∏ªË¶ÅÂÅö‰∫Ü‰∏Ä‰∫õÊ†∏ÂøÉÁöÑÂÆûÁé∞ÂêåÊó∂ÂÆö‰πâ‰∫ÜÁõ∏ÂÖ≥Êé•Âè£ ‰Ω†Áªù‰∏çÂ∫îËØ•Áõ¥Êé•‰ΩøÁî®Ëøô‰∏™Á±ªÂàõÂª∫ÂØπË±°Âπ∂‰ΩøÁî® Âõ†‰∏∫Ê≤°Ê≥ïÊ≠£Â∏∏‰ΩøÁî®

import UIKit

enum WKRefreshState {
    case InvalidState           // 0.Êó†ÊïàÁä∂ÊÄÅ
    case IdleState              // 1.Èó≤ÁΩÆÁä∂ÊÄÅ
    case DragingState           // 2.Ê≠£Âú®‰∏ãÊãâÁä∂ÊÄÅ
    case WillRefreshState       // 3.Âç≥Â∞ÜÂà∑Êñ∞
    case RefreshingState        // 4.Ê≠£Âú®Âà∑Êñ∞Áä∂ÊÄÅ
    case ReleaseState           // 5.ÊùæÂºÄÊâãÁä∂ÊÄÅ[Ê≤°ÊúâÂà∑Êñ∞]
    case RefreshCompleteState   // 6.Âà∑Êñ∞ÂÆåÊàê
}

enum WKCallbackMode {
    case ClosureMode
    case SelectorMode
}

public class WKRefreshControl: UIView {
    private let WKRefreshKeyPathContentOffset = "contentOffset"
    internal var callbackMode = WKCallbackMode.ClosureMode
    internal weak var scrollView:UIScrollView?
    internal var refreshState = WKRefreshState.InvalidState
    internal var callback:(()->(Void)) = {}
    internal weak var targetObject:AnyObject?
    internal var selector:Selector?
    internal var codeToRefresh = false
    
    // Áî®‰∫éËÆ∞ÂΩïscrollViewÁöÑÂàùÂßãInsetÂÄº
    internal var scrollViewOriginalInset = UIEdgeInsetsZero
    
    public override init(frame: CGRect) {
        super.init(frame: frame)
        self.initialize()
    }
    
    deinit{
        wkLog("WKRefreshControl Ë¢´ÈáäÊîæ")
    }
    
    public required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // ‰ª•‰∏ãÊòØÂÜÖÈÉ®ËôöÊñπÊ≥ï Ë∞ÉÊï¥Â≠êÊéß‰ª∂ Áî±Â≠êÁ±ªÊù•ÂÆûÁé∞
    internal func initialize() -> (Void){
        self.autoresizingMask = UIViewAutoresizing.FlexibleWidth
        self.backgroundColor = UIColor.clearColor()
    }
}

// MARK: - ÁßÅÊúâÊé•Âè£
extension WKRefreshControl{
    
    private func addObservers() -> (Void){
        let options:NSKeyValueObservingOptions = [NSKeyValueObservingOptions.New,
                                                  NSKeyValueObservingOptions.Old]
        self.scrollView?.addObserver(
            self, forKeyPath:WKRefreshKeyPathContentOffset, options:options, context: nil)
    }
    
    private func removeObservers() -> (Void){
        self.superview?.removeObserver(self, forKeyPath: WKRefreshKeyPathContentOffset, context: nil)
    }
}

// KVOÂ§ÑÁêÜÊñπÊ≥ï
extension WKRefreshControl{
    
    public override func observeValueForKeyPath(
        keyPath: String?, ofObject object: AnyObject?,
        change: [String : AnyObject]?,
        context: UnsafeMutablePointer<Void>) {
        guard keyPath != nil else {
            return
        }
        
        switch keyPath! {
        case WKRefreshKeyPathContentOffset:
            self.scrollViewContentOffsetDidChanged(change)
            break;
            
        default:
            break;
        }
    }
}

// MARK: - ÈáçÂÜôÁà∂Á±ªÁõ∏ÂÖ≥ÁöÑÊñπÊ≥ï
extension WKRefreshControl{
    
    public override func willMoveToSuperview(newSuperview: UIView?) {
        super.willMoveToSuperview(newSuperview)
        guard newSuperview != nil && (newSuperview?.isKindOfClass(UIScrollView.classForCoder()))!
        else{
            self.removeObservers()
            return
        }
        
        self.scrollView = newSuperview as? UIScrollView
        self.wk_Origin.x = 0
        self.wk_Width = (newSuperview?.wk_Width)!
      
        self.addObservers()
    }
    
    public override func layoutSubviews() {
        super.layoutSubviews()
        self.placeSubViews()
        guard self.scrollView != nil else{
            return
        }
        let originalInset = self.scrollView!.contentInset
        self.scrollViewOriginalInset = UIEdgeInsetsMake(
            originalInset.top - WKAppearance.refreshHeaderHeight,
            originalInset.left, originalInset.bottom, originalInset.right)
    }
}

// MARK: - Êèê‰æõÁªôÂ≠êÁ±ªË¶ÜÁõñÁöÑÊñπÊ≥ï[Á∫ØËôöÊñπÊ≥ïüòä]
extension WKRefreshControl{
    
    internal func placeSubViews() -> (Void) {}
    internal func scrollViewContentOffsetDidChanged(change:Dictionary<String, AnyObject>?) -> (Void){}
    public func completeRefresh() -> (Void){}
    public func beginRefresh() -> (Void) {}
}
